{"version":3,"sources":["index.js"],"names":["Die","props","index","cube","document","querySelectorAll","showClass","this","value","classList","add","className","onChange","changeSide","bind","name","React","Component","Results","stats","roll","dieResults","i","num","firstPair","result","checkNumOcurrences","checkTwoPairs","resulting_hands","n","die_faces","die_combinantion_list","recursive_roll","push","pop","higher_rolls","rollCount","countHand","init_hand","checkHand","hands","die_combinations","die_combination_list","rolling_hand","comboResult","max_ind_comb","indexOf","Math","max","max_ind_init","slice","pickedValues","dieValues","length","resultsDiv","n_die_statistics","innerHTML","elem","createElement","toFixed","appendChild","count","toLowerCase","type","onClick","getValues","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2f438674.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n  \nclass Die extends React.Component {\n    /* Add cube animations to all cubes and attach to radio buttons. */\n    constructor(props) {\n        super(props);\n        this.index = props.index;\n    }\n\n    changeSide() {\n        var cube = document.querySelectorAll('.cube');\n        var pick = document.querySelectorAll('.pick-face')[this.index].value;    \n        var showClass = 'show-' + pick;\n\n        cube[this.index].classList = '';\n        cube[this.index].classList.add('cube', showClass);\n    }\n\n    render() {\n        return (\n        <div className=\"col-2\">\n            <div className=\"scene\" >\n                <div className=\"cube show-A\">\n                    <div className=\"cube__face cube__face--front\">A</div>\n                    <div className=\"cube__face cube__face--back\">9</div>\n                    <div className=\"cube__face cube__face--right\">K</div>\n                    <div className=\"cube__face cube__face--left\">10</div>\n                    <div className=\"cube__face cube__face--top\">Q</div>\n                    <div className=\"cube__face cube__face--bottom\">J</div>\n                </div>\n            </div>\n            <select className=\"pick-face\" onChange={this.changeSide.bind(this)}>\n                <option name=\"rotate-cube-side0\" value=\"A\">A</option>\n                <option name=\"rotate-cube-side0\" value=\"K\">K</option>\n                <option name=\"rotate-cube-side0\" value=\"Q\">Q</option>\n                <option name=\"rotate-cube-side0\" value=\"J\">J</option>\n                <option name=\"rotate-cube-side0\" value=\"10\">10</option>\n                <option name=\"rotate-cube-side0\" value=\"9\">9</option>\n            </select>\n        </div>\n        )\n    }\n}\n\nclass Results extends React.Component {\n    constructor(props) {\n        super(props)\n        this.index = props.index\n        this.stats = {};\n    }\n\n    // Changes roll from ['A', 'A', 'A', 'A', 'A'] to [5, 0, 0, 0, 0, 0]\n    countHand(roll) {\n        let dieResults = [0, 0, 0, 0, 0, 0]\n        for (let i in roll) {\n            if (roll[i] === 'A')\n                dieResults[0] +=  1\n            if (roll[i] === 'K')\n                dieResults[1] += 1\n            if (roll[i] === 'Q')\n                dieResults[2] += 1\n            if (roll[i] === 'J')\n                dieResults[3] += 1\n            if (roll[i] === '10')\n                dieResults[4] += 1\n            if (roll[i] === '9')\n                dieResults[5] += 1\n        }\n        return dieResults\n    }\n\n    // Check how many times a face appeared on a die, compliments checkHand\n    checkNumOcurrences(dieResults, num) {\n        for (let i = 0; i < 6; i++) {\n            if (dieResults[i] === num) {\n                return i\n            }\n        }\n        return -1\n    }\n    \n    // Auxiliary check to pairs in checkHand\n    checkTwoPairs(dieResults, firstPair) {\n        for (let i = firstPair + 1; i < 6; i++) {\n            if (dieResults[i] === 2) {\n                return i\n            }\n        }\n        return -1\n    }\n\n    // Returns result string\n    checkHand(dieResults) {\n        let result = this.checkNumOcurrences(dieResults, 5)\n        if (result > -1) {\n            return 'QUINTILLA'\n        }\n\n        result = this.checkNumOcurrences(dieResults, 4)\n        if (result > -1) {\n            return 'POKER'\n        }\n\n        result = this.checkNumOcurrences(dieResults, 3)\n        if (result > -1) {\n            let fullCheck = this.checkNumOcurrences(dieResults, 2)\n            if (fullCheck > -1) {\n                return 'FULL'\n            } else {\n                return 'TERCIA'\n            }\n        }\n\n        result = this.checkNumOcurrences(dieResults, 2)\n        if (result > -1) {\n            let twoPair = this.checkTwoPairs(dieResults, result)\n            if (twoPair > -1) {\n                return 'TWO PAIR'\n            } else {\n                return 'PAIR'\n            }                \n        }\n        return 'PACHUCA'\n    }\n\n    checkHandPop(dieResults, resulting_hands) {\n        let result = this.checkNumOcurrences(dieResults, 5)\n        if (result > -1) {\n            resulting_hands['QUINTILLA'] += 1\n            return\n        }\n\n        result = this.checkNumOcurrences(dieResults, 4)\n        if (result > -1) {\n            resulting_hands['POKER'] += 1\n            return\n        }\n\n        result = this.checkNumOcurrences(dieResults, 3)\n        if (result > -1) {\n            let fullCheck = this.checkNumOcurrences(dieResults, 2)\n            if (fullCheck > -1) {\n                resulting_hands['FULL'] += 1\n            } else {\n                resulting_hands['TERCIA'] += 1\n            }\n            return\n        }\n\n        result = this.checkNumOcurrences(dieResults, 2)\n        if (result > -1) {\n            let twoPair = this.checkTwoPairs(dieResults, result)\n            if (twoPair > -1) {\n                resulting_hands['TWO PAIR'] += 1 \n            } else {\n                resulting_hands['PAIR'] += 1 \n            }\n            return\n        }\n        resulting_hands['PACHUCA'] += 1\n    }\n\n    die_combination_list(n) {\n        function recursive_roll(n, roll=[]) {\n            if (n === 0) {\n                die_combinantion_list.push([...roll])\n            } else {\n                for (let i = 0; i < 6; i++) {\n                    roll.push(die_faces[i])\n                    recursive_roll(n-1, roll)\n                    roll.pop()\n                }\n            }\n        }\n        let die_faces = ['A', 'K', 'Q', 'J', '10', '9'];\n        let die_combinantion_list = [];\n        recursive_roll(n)\n        return die_combinantion_list    \n    }\n\n    n_die_statistics(n, roll) {\n        let die_faces = ['A', 'K', 'Q', 'J', '10', '9']\n        let higher_rolls = 0\n        let rollCount = this.countHand(roll)\n        let init_hand = this.checkHand(rollCount)\n        let resulting_hands = {\n            'PACHUCA': 0,\n            'PAIR': 0,\n            'TWO PAIR': 0,\n            'TERCIA': 0,\n            'FULL': 0,\n            'POKER': 0,\n            'QUINTILLA': 0\n        }\n        let beating_hands = {\n            'PACHUCA': 0,\n            'PAIR': 0,\n            'TWO PAIR': 0,\n            'TERCIA': 0,\n            'FULL': 0,\n            'POKER': 0,\n            'QUINTILLA': 0\n        }\n        let hands = ['QUINTILLA', 'POKER', 'FULL', 'TERCIA', 'TWO PAIR', 'PAIR', 'PACHUCA']\n    \n        // Get list of all possible combinations with n-die\n        let die_combinations = this.die_combination_list(n, die_faces)\n        \n        // Check what each combination is classified as\n        for (let i in die_combinations) {\n            let rolling_hand = this.countHand(die_combinations[i])\n            let comboResult = this.checkHand(rolling_hand)\n            if (rollCount === rolling_hand) {\n                resulting_hands[comboResult] += 1\n                continue\n            } else if (comboResult === init_hand) {\n                let max_ind_comb = comboResult.indexOf(Math.max(comboResult))\n                let max_ind_init = init_hand.indexOf(Math.max(init_hand))\n\n                if (init_hand === 'TWO PAIR') {\n                    if (max_ind_init === max_ind_comb) {\n                        max_ind_comb = comboResult.slice(max_ind_init).indexOf(Math.max(comboResult.slice(max_ind_init)))\n                        max_ind_init = init_hand.slice(max_ind_comb).indexOf(Math.max(init_hand.slice(max_ind_comb)))\n                        if (max_ind_init === max_ind_comb) {\n                            if (rolling_hand > rollCount) {\n                                higher_rolls += 1\n                            }\n                        } else if (max_ind_comb > max_ind_init) {\n                            higher_rolls += 1\n                        } \n                    } else if (max_ind_comb > max_ind_init) {\n                        higher_rolls += 1  \n                    } \n                } else {\n                    if (max_ind_init === max_ind_comb) {\n                        if (rolling_hand > rollCount) {\n                            higher_rolls += 1\n                        } else if (max_ind_comb > max_ind_init) {\n                            higher_rolls += 1  \n                        }\n                    }\n                }\n            } else {\n                if (hands.indexOf(comboResult) < hands.indexOf(init_hand)) {\n                    higher_rolls += 1\n                }\n            }\n            resulting_hands[comboResult] += 1\n\n        }\n        return [resulting_hands, higher_rolls, init_hand]\n    }\n\n    // // Print results and statistics.\n    // print(\"Number of dice:\\n   \", n)\n    // print()\n    // print(\"Probability of beating: {}\\n   \".format(faces_roll), \"{:.2%}\".format(higher_rolls / pow(6, n)))\n    // print()\n    // print(\"Overall Statistics: \")\n    // for i in resulting_hands:\n    //     print_n_die_statistics(resulting_hands, i, n)\n    // probs = 0\n    // print()\n    // for i in resulting_hands:\n    //     probs = print_higher_than_stats(resulting_hands, i, n, probs)\n    // }\n\n\n\n    getValues() {\n        let pickedValues = document.querySelectorAll('.game')[5-this.index].querySelectorAll('.pick-face')\n        let dieValues = []\n\n        for (let i = 0; i < pickedValues.length; i++) {\n            dieValues.push(pickedValues[i].value)\n        }\n\n        let resultsDiv = document.querySelectorAll(`.results-${this.index}`)\n        //resultsDiv.innerHTML = this.checkHand(this.countHand(dieValues))\n        \n        const dieCombinations = this.die_combination_list(this.index);\n        const stats = this.n_die_statistics(this.index, dieValues)\n        \n        resultsDiv[0].innerHTML = \"\"\n        resultsDiv[1].innerHTML = \"\"\n\n        let elem = document.createElement('h5')\n        elem.innerHTML = 'P( beating ' + dieValues + ' ) = ' + (stats[1] / 6**this.index * 100).toFixed(2) + '%'\n        resultsDiv[1].appendChild(elem)\n\n        elem = document.createElement('h5')\n        elem.innerHTML = 'You rolled a ' + stats[2]\n\n        resultsDiv[0].appendChild(elem)\n\n        let count = 1.00000000000001\n        for (let i in stats[0]) {\n            elem = document.createElement('div')\n            count -= stats[0][i] / 6**this.index;\n            elem.innerHTML = 'P( beating ' + i.toLowerCase() + ' ) = ' + (count*100).toFixed(2) + '%'\n            resultsDiv[0].appendChild(elem)\n\n            elem = document.createElement('div')\n            elem.innerHTML = 'P( ' + i.toLowerCase() + ' ) = ' + (stats[0][i] / 6**this.index * 100).toFixed(2) + '%'\n            resultsDiv[1].appendChild(elem)\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-4 col-md-3 col-lg-2 align-self-center\">\n                        <button type=\"submit\" className=\"submit\" onClick={this.getValues.bind(this)}>Get Results</button>\n                    </div>\n                    <div className=\"col-1\"></div>\n                    <div className={`results-${this.index} col-4`}></div>\n                    <div className={`results-${this.index} col-4`}></div>\n                </div>\n            </div>\n        )\n    }\n}\n  \nclass App extends React.Component {\n    render() {\n      return (\n        <div>\n            <div className=\"container\">\n                <h2>Five Dice Probability</h2>\n                <div className=\"game row \">\n                    <Die index=\"0\"/>\n                    <Die index=\"1\"/>\n                    <Die index=\"2\"/>\n                    <Die index=\"3\"/>\n                    <Die index=\"4\"/>\n                </div>\n                <Results index=\"5\"/>\n            </div>\n            <hr/>\n            <div className=\"container\">\n                <h2>Four Dice Probability</h2>\n                <div className=\"game row \">\n                    <Die index=\"5\"/>\n                    <Die index=\"6\"/>\n                    <Die index=\"7\"/>\n                    <Die index=\"8\"/>\n                </div>\n                <Results index=\"4\"/>\n            </div>\n            <hr/>\n            <div className=\"container\">\n                <h2>Three Dice Probability</h2>\n                <div className=\"game row\">\n                    <Die index=\"9\"/>\n                    <Die index=\"10\"/>\n                    <Die index=\"11\"/>\n                </div>\n                <Results index=\"3\"/>\n            </div>\n            <hr/>\n            <div className=\"container\">\n                <h2>Two Dice Probability</h2>\n                <div className=\"game row \">\n                    <Die index=\"12\"/>\n                    <Die index=\"13\"/>\n                </div>\n                <Results index=\"2\"/>\n            </div>\n            <hr/>\n            <div className=\"container\">\n                <h2>One Die Probability</h2>\n                <div className=\"game row \">\n                    <Die index=\"14\"/>\n                </div>\n                <Results index=\"1\"/>\n            </div>\n        </div>\n      );\n    }\n}\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n  \n"],"sourceRoot":""}